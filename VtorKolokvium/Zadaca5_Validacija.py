import warnings
from sklearn.exceptions import ConvergenceWarning
from sklearn.neural_network import MLPClassifier


if __name__=="__main__":
    warnings.filterwarnings('ignore', category=ConvergenceWarning)
    dataset = [
        [6.3, 2.9, 5.6, 1.8, 0],
        [6.5, 3.0, 5.8, 2.2, 0],
        [7.6, 3.0, 6.6, 2.1, 0],
        [4.9, 2.5, 4.5, 1.7, 0],
        [7.3, 2.9, 6.3, 1.8, 0],
        [6.7, 2.5, 5.8, 1.8, 0],
        [7.2, 3.6, 6.1, 2.5, 0],
        [6.5, 3.2, 5.1, 2.0, 0],
        [6.4, 2.7, 5.3, 1.9, 0],
        [6.8, 3.0, 5.5, 2.1, 0],
        [5.7, 2.5, 5.0, 2.0, 0],
        [5.8, 2.8, 5.1, 2.4, 0],
        [6.4, 3.2, 5.3, 2.3, 0],
        [6.5, 3.0, 5.5, 1.8, 0],
        [7.7, 3.8, 6.7, 2.2, 0],
        [7.7, 2.6, 6.9, 2.3, 0],
        [6.0, 2.2, 5.0, 1.5, 0],
        [6.9, 3.2, 5.7, 2.3, 0],
        [5.6, 2.8, 4.9, 2.0, 0],
        [7.7, 2.8, 6.7, 2.0, 0],
        [6.3, 2.7, 4.9, 1.8, 0],
        [6.7, 3.3, 5.7, 2.1, 0],
        [7.2, 3.2, 6.0, 1.8, 0],
        [6.2, 2.8, 4.8, 1.8, 0],
        [6.1, 3.0, 4.9, 1.8, 0],
        [6.4, 2.8, 5.6, 2.1, 0],
        [7.2, 3.0, 5.8, 1.6, 0],
        [7.4, 2.8, 6.1, 1.9, 0],
        [7.9, 3.8, 6.4, 2.0, 0],
        [6.4, 2.8, 5.6, 2.2, 0],
        [6.3, 2.8, 5.1, 1.5, 0],
        [6.1, 2.6, 5.6, 1.4, 0],
        [7.7, 3.0, 6.1, 2.3, 0],
        [6.3, 3.4, 5.6, 2.4, 0],
        [5.1, 3.5, 1.4, 0.2, 1],
        [4.9, 3.0, 1.4, 0.2, 1],
        [4.7, 3.2, 1.3, 0.2, 1],
        [4.6, 3.1, 1.5, 0.2, 1],
        [5.0, 3.6, 1.4, 0.2, 1],
        [5.4, 3.9, 1.7, 0.4, 1],
        [4.6, 3.4, 1.4, 0.3, 1],
        [5.0, 3.4, 1.5, 0.2, 1],
        [4.4, 2.9, 1.4, 0.2, 1],
        [4.9, 3.1, 1.5, 0.1, 1],
        [5.4, 3.7, 1.5, 0.2, 1],
        [4.8, 3.4, 1.6, 0.2, 1],
        [4.8, 3.0, 1.4, 0.1, 1],
        [4.3, 3.0, 1.1, 0.1, 1],
        [5.8, 4.0, 1.2, 0.2, 1],
        [5.7, 4.4, 1.5, 0.4, 1],
        [5.4, 3.9, 1.3, 0.4, 1],
        [5.1, 3.5, 1.4, 0.3, 1],
        [5.7, 3.8, 1.7, 0.3, 1],
        [5.1, 3.8, 1.5, 0.3, 1],
        [5.4, 3.4, 1.7, 0.2, 1],
        [5.1, 3.7, 1.5, 0.4, 1],
        [4.6, 3.6, 1.0, 0.2, 1],
        [5.1, 3.3, 1.7, 0.5, 1],
        [4.8, 3.4, 1.9, 0.2, 1],
        [5.0, 3.0, 1.6, 0.2, 1],
        [5.0, 3.4, 1.6, 0.4, 1],
        [5.2, 3.5, 1.5, 0.2, 1],
        [5.2, 3.4, 1.4, 0.2, 1],
        [5.5, 2.3, 4.0, 1.3, 2],
        [6.5, 2.8, 4.6, 1.5, 2],
        [5.7, 2.8, 4.5, 1.3, 2],
        [6.3, 3.3, 4.7, 1.6, 2],
        [4.9, 2.4, 3.3, 1.0, 2],
        [6.6, 2.9, 4.6, 1.3, 2],
        [5.2, 2.7, 3.9, 1.4, 2],
        [5.0, 2.0, 3.5, 1.0, 2],
        [5.9, 3.0, 4.2, 1.5, 2],
        [6.0, 2.2, 4.0, 1.0, 2],
        [6.1, 2.9, 4.7, 1.4, 2],
        [5.6, 2.9, 3.6, 1.3, 2],
        [6.7, 3.1, 4.4, 1.4, 2],
        [5.6, 3.0, 4.5, 1.5, 2],
        [5.8, 2.7, 4.1, 1.0, 2],
        [6.2, 2.2, 4.5, 1.5, 2],
        [5.6, 2.5, 3.9, 1.1, 2],
        [5.9, 3.2, 4.8, 1.8, 2],
        [6.1, 2.8, 4.0, 1.3, 2],
        [6.3, 2.5, 4.9, 1.5, 2],
        [6.1, 2.8, 4.7, 1.2, 2],
        [6.4, 2.9, 4.3, 1.3, 2],
        [6.6, 3.0, 4.4, 1.4, 2],
        [6.8, 2.8, 4.8, 1.4, 2],
        [6.7, 3.0, 5.0, 1.7, 2],
        [6.0, 2.9, 4.5, 1.5, 2],
        [5.7, 2.6, 3.5, 1.0, 2],
        [5.5, 2.4, 3.8, 1.1, 2],
        [5.4, 3.0, 4.5, 1.5, 2],
        [6.0, 3.4, 4.5, 1.6, 2],
        [6.7, 3.1, 4.7, 1.5, 2],
        [6.3, 2.3, 4.4, 1.3, 2],
        [5.6, 3.0, 4.1, 1.3, 2],
        [5.5, 2.5, 4.0, 1.3, 2],
        [5.5, 2.6, 4.4, 1.2, 2],
        [6.1, 3.0, 4.6, 1.4, 2],
        [5.8, 2.6, 4.0, 1.2, 2],
        [5.0, 2.3, 3.3, 1.0, 2],
        [5.6, 2.7, 4.2, 1.3, 2],
        [5.7, 3.0, 4.2, 1.2, 2],
        [5.7, 2.9, 4.2, 1.3, 2],
        [6.2, 2.9, 4.3, 1.3, 2],
        [5.1, 2.5, 3.0, 1.1, 2],
        [5.7, 2.8, 4.1, 1.3, 2],
        [6.4, 3.1, 5.5, 1.8, 0],
        [6.0, 3.0, 4.8, 1.8, 0],
        [6.9, 3.1, 5.4, 2.1, 0],
        [6.8, 3.2, 5.9, 2.3, 0],
        [6.7, 3.3, 5.7, 2.5, 0],
        [6.7, 3.0, 5.2, 2.3, 0],
        [6.3, 2.5, 5.0, 1.9, 0],
        [6.5, 3.0, 5.2, 2.0, 0],
        [6.2, 3.4, 5.4, 2.3, 0],
        [4.7, 3.2, 1.6, 0.2, 1],
        [4.8, 3.1, 1.6, 0.2, 1],
        [5.4, 3.4, 1.5, 0.4, 1],
        [5.2, 4.1, 1.5, 0.1, 1],
        [5.5, 4.2, 1.4, 0.2, 1],
        [4.9, 3.1, 1.5, 0.2, 1],
        [5.0, 3.2, 1.2, 0.2, 1],
        [5.5, 3.5, 1.3, 0.2, 1],
        [4.9, 3.6, 1.4, 0.1, 1],
        [4.4, 3.0, 1.3, 0.2, 1],
        [5.1, 3.4, 1.5, 0.2, 1],
        [5.0, 3.5, 1.3, 0.3, 1],
        [4.5, 2.3, 1.3, 0.3, 1],
        [4.4, 3.2, 1.3, 0.2, 1],
        [5.0, 3.5, 1.6, 0.6, 1],
        [5.9, 3.0, 5.1, 1.8, 0],
        [5.1, 3.8, 1.9, 0.4, 1],
        [4.8, 3.0, 1.4, 0.3, 1],
        [5.1, 3.8, 1.6, 0.2, 1],
        [5.5, 2.4, 3.7, 1.0, 2],
        [5.8, 2.7, 3.9, 1.2, 2],
        [6.0, 2.7, 5.1, 1.6, 2],
        [6.7, 3.1, 5.6, 2.4, 0],
        [6.9, 3.1, 5.1, 2.3, 0],
        [5.8, 2.7, 5.1, 1.9, 0],
    ]

    train_set=dataset[:int(len(dataset)-10)]
    train_x=[row[:-1] for row in train_set]
    train_y=[row[-1] for row in train_set]

    val_set=dataset[int(len(dataset)-10):]
    val_x=[row[:-1] for row in val_set]
    val_y=[row[-1] for row in val_set]

    classifier1=MLPClassifier(3, activation='relu', max_iter=200, random_state=0, learning_rate_init=0.003)
    classifier2 = MLPClassifier(3, activation='relu', max_iter=200, random_state=0, learning_rate_init=0.05)
    classifier3 = MLPClassifier(3, activation='relu', max_iter=200, random_state=0, learning_rate_init=0.7)
    classifier1.fit(train_x,train_y)
    classifier2.fit(train_x,train_y)
    classifier3.fit(train_x,train_y)
    classifiers=[classifier1,classifier2,classifier3]

    max=0
    best_classif=None
    for c in classifiers:
        acc=0
        for i in range(len(val_set)):
            predicted_class=c.predict([val_x[i]])[0]
            true_class=val_y[i]

            if predicted_class==true_class:
                acc+=1

        if acc>max:
            max=acc
            best_classif=c
    entry=input()
    data=[]
    while entry not in ['0','1','2']:
        data.append(entry)
        entry=input()
    data=[float(el) for el in data]
    dict={classifier1: 0.003, classifier2: 0.05, classifier3: 0.7}
    print(f'Best learning rate: {dict[best_classif]}')
    predicted_class=best_classif.predict([data])[0]
    print(predicted_class)
